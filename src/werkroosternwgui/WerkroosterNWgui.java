/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package werkroosternwgui;

import werkroosternw.*;
import java.awt.*;
import java.awt.event.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import java.time.*;
import java.util.ArrayList;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.*;

/**
 * WerkroosterNWgui beheert het zichtbare deel van het programma.
 *
 * @author Jonathan van der Steege (2020)
 */
public class WerkroosterNWgui extends javax.swing.JFrame {

    private WerkroosterNW werkrooster = new WerkroosterNW();
    private MaandKalender kalender;
    private BestandStream bestandStream;
    private ArrayList<Dienst> dienstenWeek;
    private ArrayList<Dienst> dienstenWeekend;
    private ArrayList<LocalDate> kal;
    private ArrayList<Dienst> dienstenMaand;
    private ArrayList<JComboBox> comboArray;
    private final GridLayout dagenLayout = new GridLayout(31, 2, 10, 10);
    private final JPanel lMaandPanel = new JPanel();
    private final JPanel rMaandPanel = new JPanel();
    private final JPanel maandPanel = new JPanel();
    private final JTextArea maandTekstGebied = new JTextArea();
    private final JScrollPane scrollPane = new JScrollPane();
    private final JScrollPane weekTabelScrollPane = new JScrollPane();
    private final JScrollPane weekendTabelScrollPane = new JScrollPane();
    private JTable weekTabel;
    private JTable weekendTabel;
    private DefaultTableModel weekModel = new DefaultTableModel();
    private DefaultTableModel weekendModel = new DefaultTableModel();
    private boolean nietOpgeslagenBewerkingen = false;
    private boolean nietOpgeslagenMaand = false;

    /**
     * Creates new form WerkroosterNWGUI
     */
    public WerkroosterNWgui() {
        initComponents();
        mijnInit();
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                afsluiten();
            }
        });
    }

    /**
     * Handelt het afsluiten af. Als er niet-opgeslagen wijzigingen zijn, krijgt
     * de gebruiker de keuze het alsnog op te slaan.
     */
    private void afsluiten() {
        if (nietOpgeslagenMaand) {
            wijzigingenDialog.setVisible(true);
        } else {
            dispose();
        }
    }

    /**
     * Initialiseer diensten, vult de combobox met maanden, zet het tekstgebied
     * op onbewerkbaar en deactiveer de 'Bewaar gegevens'-knop.
     */
    private void mijnInit() {
        bestandStream = new BestandStream();
        werkrooster.vulDiensten(bestandStream.inladenWeek(), bestandStream.inladenWeekend());
        scrollPane.setViewportView(maandTekstGebied);
        dienstenWeek = werkrooster.geefDienstenWeek();
        dienstenWeekend = werkrooster.geefDienstenWeekend();
        vulMaandComboBox();
        vulJaarComboBox();
        maandTekstGebied.setEditable(false);
        maandTekstGebied.setFont(new Font("Monospaced", Font.PLAIN, 12));
        toonDienstenButton.setEnabled(false);
        bewaarGegevensKnop.setEnabled(false);
        String tekstGebied = "[Week]\n" + werkrooster.printDienstenWeek() + "\n\n[Weekend]\n" + werkrooster.printDienstenWeekend();
        maandTekstGebied.setText(tekstGebied);
        uitvoerPanel.add(scrollPane);
        comboArray = new ArrayList<>();
        resetTabellen();
        weekTabelPanel.add(weekTabelScrollPane);
        weekendTabelPanel.add(weekendTabelScrollPane);

        leesData();
        toepassenKnop.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        overFrame = new javax.swing.JFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        overWerkroosterNWLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        wijzigingenDialog = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        neeKnop = new javax.swing.JButton();
        jaKnop = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        annulerenKnop = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        titelWijzigingenLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        bewerkenFrame = new javax.swing.JFrame();
        dataOpslaanPanel = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        resetKnop = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        toepassenKnop = new javax.swing.JButton();
        annulerenDataKnop = new javax.swing.JButton();
        okDataKnop = new javax.swing.JButton();
        bewerkDienstenPanel = new javax.swing.JPanel();
        weekTabelPanel = new javax.swing.JPanel();
        weekKnoppenPanel = new javax.swing.JPanel();
        voegToeWeekKnop = new javax.swing.JButton();
        verwijderRijWeekKnop = new javax.swing.JButton();
        weekendTabelPanel = new javax.swing.JPanel();
        weekendKnoppenPanel = new javax.swing.JPanel();
        voegToeWeekendKnop = new javax.swing.JButton();
        verwijderRijWeekendKnop = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        afsluitenButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        bewerkDataKnop = new javax.swing.JButton();
        hoofdPanel = new javax.swing.JTabbedPane();
        maandTabPanel = new javax.swing.JPanel();
        maandKnoppenPanel = new javax.swing.JPanel();
        maandComboBox = new javax.swing.JComboBox<>();
        jaarComboBox = new javax.swing.JComboBox<>();
        vulMaandButton = new javax.swing.JButton();
        toonDienstenButton = new javax.swing.JButton();
        dagenPanel = new javax.swing.JPanel();
        dienstenTabPanel = new javax.swing.JPanel();
        uitvoerPanel = new javax.swing.JPanel();
        dienstKnoppenPanel = new javax.swing.JPanel();
        bewaarGegevensKnop = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        titelLabel = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        overButton = new javax.swing.JButton();

        overFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        overFrame.setTitle("Over WerkroosterNW");
        overFrame.setMinimumSize(new java.awt.Dimension(500, 490));
        overFrame.setPreferredSize(new java.awt.Dimension(500, 490));
        overFrame.setSize(new java.awt.Dimension(500, 490));
        overFrame.getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jScrollPane1.setBorder(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(526, 477));
        jScrollPane1.setOpaque(false);
        jScrollPane1.setPreferredSize(new java.awt.Dimension(526, 477));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("WerkroosterNW is gemaakt door Jonathan van der Steege in het voorjaar van \n2020 voor Dinesh Chan.\n\nMet dit programma kun je aan de hand van maand en jaar het werkrooster \ninvullen van de diensten die bij Nieuw Woelwijck gebruikt worden.\n\n\nLicentie-informatie:\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <https://www.gnu.org/licenses/>.");
        jTextArea1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTextArea1.setOpaque(false);
        jScrollPane1.setViewportView(jTextArea1);

        overFrame.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        overWerkroosterNWLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        overWerkroosterNWLabel.setText("WerkroosterNW");
        overWerkroosterNWLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        overFrame.getContentPane().add(overWerkroosterNWLabel, java.awt.BorderLayout.PAGE_START);

        jPanel1.setMinimumSize(new java.awt.Dimension(526, 30));
        jPanel1.setPreferredSize(new java.awt.Dimension(526, 30));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton);

        overFrame.getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        wijzigingenDialog.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        wijzigingenDialog.setTitle("Let op!");
        wijzigingenDialog.setMinimumSize(new java.awt.Dimension(360, 200));
        wijzigingenDialog.setPreferredSize(null);
        wijzigingenDialog.setSize(new java.awt.Dimension(360, 200));
        wijzigingenDialog.getContentPane().setLayout(new java.awt.BorderLayout(5, 5));

        jPanel4.setLayout(new java.awt.BorderLayout());

        neeKnop.setText("Nee");
        neeKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neeKnopActionPerformed(evt);
            }
        });
        jPanel9.add(neeKnop);

        jaKnop.setText("Ja");
        jaKnop.setMaximumSize(new java.awt.Dimension(59, 24));
        jaKnop.setMinimumSize(new java.awt.Dimension(59, 24));
        jaKnop.setPreferredSize(new java.awt.Dimension(59, 24));
        jaKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jaKnopActionPerformed(evt);
            }
        });
        jPanel9.add(jaKnop);

        jPanel4.add(jPanel9, java.awt.BorderLayout.LINE_END);

        annulerenKnop.setText("Annuleren");
        annulerenKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerenKnopActionPerformed(evt);
            }
        });
        jPanel10.add(annulerenKnop);

        jPanel4.add(jPanel10, java.awt.BorderLayout.LINE_START);

        wijzigingenDialog.getContentPane().add(jPanel4, java.awt.BorderLayout.PAGE_END);

        jPanel5.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        titelWijzigingenLabel.setText("Er zijn niet-opgeslagen wijzigingen");
        jPanel5.add(titelWijzigingenLabel);

        wijzigingenDialog.getContentPane().add(jPanel5, java.awt.BorderLayout.PAGE_START);

        jPanel6.setLayout(new java.awt.GridLayout());

        jScrollPane2.setBorder(null);
        jScrollPane2.setMinimumSize(null);
        jScrollPane2.setOpaque(false);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText("De maand is gewijzigd, maar is niet opgeslagen.\n\nWil je de wijzigingen opslaan voordat het programma sluit?\n");
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setBorder(null);
        jTextArea2.setOpaque(false);
        jScrollPane2.setViewportView(jTextArea2);

        jPanel6.add(jScrollPane2);

        wijzigingenDialog.getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        bewerkenFrame.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        bewerkenFrame.setTitle("Bewerk diensten");
        bewerkenFrame.setMinimumSize(new java.awt.Dimension(650, 600));
        bewerkenFrame.setPreferredSize(new java.awt.Dimension(650, 600));
        bewerkenFrame.setSize(new java.awt.Dimension(650, 600));

        dataOpslaanPanel.setLayout(new java.awt.BorderLayout());

        jPanel11.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        resetKnop.setText("Reset");
        resetKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetKnopActionPerformed(evt);
            }
        });
        jPanel11.add(resetKnop);

        dataOpslaanPanel.add(jPanel11, java.awt.BorderLayout.LINE_START);

        jPanel12.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        toepassenKnop.setText("Toepassen");
        toepassenKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toepassenKnopActionPerformed(evt);
            }
        });
        jPanel12.add(toepassenKnop);

        annulerenDataKnop.setText("Annuleren");
        annulerenDataKnop.setPreferredSize(new java.awt.Dimension(102, 24));
        annulerenDataKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerenDataKnopActionPerformed(evt);
            }
        });
        jPanel12.add(annulerenDataKnop);

        okDataKnop.setText("OK");
        okDataKnop.setPreferredSize(new java.awt.Dimension(102, 24));
        okDataKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okDataKnopActionPerformed(evt);
            }
        });
        jPanel12.add(okDataKnop);

        dataOpslaanPanel.add(jPanel12, java.awt.BorderLayout.LINE_END);

        bewerkenFrame.getContentPane().add(dataOpslaanPanel, java.awt.BorderLayout.PAGE_END);

        bewerkDienstenPanel.setLayout(new java.awt.GridLayout(2, 1));

        weekTabelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Week", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        weekTabelPanel.setLayout(new java.awt.BorderLayout());

        weekKnoppenPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        voegToeWeekKnop.setText("Voeg rij toe");
        voegToeWeekKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voegToeWeekKnopActionPerformed(evt);
            }
        });
        weekKnoppenPanel.add(voegToeWeekKnop);

        verwijderRijWeekKnop.setText("Verwijder geselecteerde rij");
        verwijderRijWeekKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verwijderRijWeekKnopActionPerformed(evt);
            }
        });
        weekKnoppenPanel.add(verwijderRijWeekKnop);

        weekTabelPanel.add(weekKnoppenPanel, java.awt.BorderLayout.PAGE_START);

        bewerkDienstenPanel.add(weekTabelPanel);

        weekendTabelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weekend", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 1, 14))); // NOI18N
        weekendTabelPanel.setLayout(new java.awt.BorderLayout());

        weekendKnoppenPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        voegToeWeekendKnop.setText("Voeg rij toe");
        voegToeWeekendKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voegToeWeekendKnopActionPerformed(evt);
            }
        });
        weekendKnoppenPanel.add(voegToeWeekendKnop);

        verwijderRijWeekendKnop.setText("Verwijder geselecteerde rij");
        verwijderRijWeekendKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verwijderRijWeekendKnopActionPerformed(evt);
            }
        });
        weekendKnoppenPanel.add(verwijderRijWeekendKnop);

        weekendTabelPanel.add(weekendKnoppenPanel, java.awt.BorderLayout.PAGE_START);

        bewerkDienstenPanel.add(weekendTabelPanel);

        bewerkenFrame.getContentPane().add(bewerkDienstenPanel, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Werkrooster Nieuw Woelwijck");
        setMinimumSize(new java.awt.Dimension(800, 720));
        setSize(new java.awt.Dimension(800, 720));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        bottomPanel.setMinimumSize(new java.awt.Dimension(800, 40));
        bottomPanel.setName(""); // NOI18N
        bottomPanel.setPreferredSize(new java.awt.Dimension(800, 40));
        bottomPanel.setLayout(new java.awt.BorderLayout());

        jPanel2.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        jPanel2.add(resetButton);

        bottomPanel.add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        afsluitenButton.setText("Afsluiten");
        afsluitenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                afsluitenButtonActionPerformed(evt);
            }
        });
        jPanel3.add(afsluitenButton);

        bottomPanel.add(jPanel3, java.awt.BorderLayout.LINE_END);

        bewerkDataKnop.setText("Bewerk diensten");
        bewerkDataKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bewerkDataKnopActionPerformed(evt);
            }
        });
        jPanel13.add(bewerkDataKnop);

        bottomPanel.add(jPanel13, java.awt.BorderLayout.CENTER);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        hoofdPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        hoofdPanel.setPreferredSize(new java.awt.Dimension(0, 0));

        maandTabPanel.setLayout(new java.awt.BorderLayout());

        maandKnoppenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Acties"));
        maandKnoppenPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        maandComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        maandComboBox.setName(""); // NOI18N
        maandKnoppenPanel.add(maandComboBox);

        jaarComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        maandKnoppenPanel.add(jaarComboBox);

        vulMaandButton.setLabel("Vul maand");
        vulMaandButton.setName(""); // NOI18N
        vulMaandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vulMaandButtonActionPerformed(evt);
            }
        });
        maandKnoppenPanel.add(vulMaandButton);

        toonDienstenButton.setText("Toon diensten");
        toonDienstenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toonDienstenButtonActionPerformed(evt);
            }
        });
        maandKnoppenPanel.add(toonDienstenButton);

        maandTabPanel.add(maandKnoppenPanel, java.awt.BorderLayout.PAGE_START);

        dagenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Maand"));
        dagenPanel.setPreferredSize(new java.awt.Dimension(4, 4));
        dagenPanel.setLayout(new java.awt.BorderLayout(15, 15));
        maandTabPanel.add(dagenPanel, java.awt.BorderLayout.CENTER);

        hoofdPanel.addTab("Maandoverzicht", maandTabPanel);

        dienstenTabPanel.setLayout(new java.awt.BorderLayout());

        uitvoerPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Diensten"));
        uitvoerPanel.setPreferredSize(new java.awt.Dimension(4, 4));
        uitvoerPanel.setLayout(new java.awt.BorderLayout());
        dienstenTabPanel.add(uitvoerPanel, java.awt.BorderLayout.CENTER);
        uitvoerPanel.getAccessibleContext().setAccessibleParent(dienstenTabPanel);

        dienstKnoppenPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Acties"));
        dienstKnoppenPanel.setPreferredSize(new java.awt.Dimension(771, 69));
        dienstKnoppenPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        bewaarGegevensKnop.setText("Bewaar maandoverzicht");
        bewaarGegevensKnop.setAlignmentX(0.5F);
        bewaarGegevensKnop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bewaarGegevensKnopActionPerformed(evt);
            }
        });
        dienstKnoppenPanel.add(bewaarGegevensKnop);

        dienstenTabPanel.add(dienstKnoppenPanel, java.awt.BorderLayout.PAGE_START);

        hoofdPanel.addTab("Diensten", dienstenTabPanel);

        getContentPane().add(hoofdPanel, java.awt.BorderLayout.CENTER);

        topPanel.setLayout(new java.awt.BorderLayout(5, 5));

        titelLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        titelLabel.setText("Werkrooster voor diensten van Nieuw Woelwijck");
        jPanel7.add(titelLabel);

        topPanel.add(jPanel7, java.awt.BorderLayout.LINE_START);

        overButton.setText("Over WerkroosterNW...");
        overButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overButtonActionPerformed(evt);
            }
        });
        jPanel8.add(overButton);

        topPanel.add(jPanel8, java.awt.BorderLayout.LINE_END);

        getContentPane().add(topPanel, java.awt.BorderLayout.NORTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void vulMaandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vulMaandButtonActionPerformed
        toonMaand();
        bewaarGegevensKnop.setEnabled(false);
    }//GEN-LAST:event_vulMaandButtonActionPerformed

    private void toonDienstenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toonDienstenButtonActionPerformed
        geefOutput();
        hoofdPanel.setSelectedIndex(1);
        bewaarGegevensKnop.setEnabled(true);
        nietOpgeslagenMaand = true;
    }//GEN-LAST:event_toonDienstenButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        bestandStream = new BestandStream();
        werkrooster.vulDiensten(bestandStream.inladenWeek(), bestandStream.inladenWeekend());
        dagenPanel.removeAll();
        dagenPanel.updateUI();
        maandComboBox.setSelectedIndex(-1);
        jaarComboBox.setSelectedIndex(0);
        toonDienstenButton.setEnabled(false);
        bewaarGegevensKnop.setEnabled(false);
        String tekstGebied = "[Week]\n" + werkrooster.printDienstenWeek() + "\n\n[Weekend]\n" + werkrooster.printDienstenWeekend();
        maandTekstGebied.setText(tekstGebied);
        comboArray.clear();
        resetTabellen();
        leesData();
        nietOpgeslagenMaand = false;
    }//GEN-LAST:event_resetButtonActionPerformed

    /**
     * Neemt de naam van de maand en het jaar en voegt dit toe aan de uitvoer.
     * Daarna wordt het weggeschreven naar een bestand.
     *
     * @param evt
     */
    private void bewaarGegevensKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bewaarGegevensKnopActionPerformed
        String maandEnJaar = kalender.geefMaandJaar();
        String uitvoer = maandTekstGebied.getText();
        String bestandsnaam = "werkrooster-" + maandEnJaar + ".txt";
        try {
            schrijfBestand(bestandsnaam, uitvoer);
        } catch (IOException e) {

        }
        nietOpgeslagenMaand = false;
    }//GEN-LAST:event_bewaarGegevensKnopActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        overFrame.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void overButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overButtonActionPerformed
        overFrame.setVisible(true);
    }//GEN-LAST:event_overButtonActionPerformed

    /**
     * Haalt de gegevens van de diensten in de week en het weekend op en slaat
     * het op naar bestanden.
     *
     * @param evt
     */
    private void okDataKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okDataKnopActionPerformed
        pasDataToe();
        leesData();
        toepassenKnop.setEnabled(false);
        bewerkenFrame.dispose();
    }//GEN-LAST:event_okDataKnopActionPerformed

    private void resetKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetKnopActionPerformed
        leesData();
        toepassenKnop.setEnabled(false);
    }//GEN-LAST:event_resetKnopActionPerformed

    private void verwijderRijWeekKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verwijderRijWeekKnopActionPerformed
        int geselecteerdeRij = weekTabel.getSelectedRow();
        if (geselecteerdeRij >= 0) {
            ((DefaultTableModel) weekTabel.getModel()).removeRow(geselecteerdeRij);
        }
    }//GEN-LAST:event_verwijderRijWeekKnopActionPerformed

    private void verwijderRijWeekendKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verwijderRijWeekendKnopActionPerformed
        int geselecteerdeRij = weekendTabel.getSelectedRow();
        if (geselecteerdeRij >= 0) {
            ((DefaultTableModel) weekendTabel.getModel()).removeRow(geselecteerdeRij);
        }
    }//GEN-LAST:event_verwijderRijWeekendKnopActionPerformed

    private void voegToeWeekKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voegToeWeekKnopActionPerformed
        int geselecteerdeRij = weekTabel.getSelectedRow();
        if (geselecteerdeRij >= 0) {
            weekModel.insertRow(geselecteerdeRij, new Object[]{"", "", "", ""});
        } else {
            weekModel.addRow(new Object[]{"", "", "", ""});
        }
    }//GEN-LAST:event_voegToeWeekKnopActionPerformed

    private void voegToeWeekendKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voegToeWeekendKnopActionPerformed
        int geselecteerdeRij = weekendTabel.getSelectedRow();
        if (geselecteerdeRij >= 0) {
            weekendModel.insertRow(geselecteerdeRij, new Object[]{"", "", "", ""});
        } else {
            weekendModel.addRow(new Object[]{"", "", "", ""});
        }
    }//GEN-LAST:event_voegToeWeekendKnopActionPerformed

    private void toepassenKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toepassenKnopActionPerformed
        pasDataToe();
        leesData();
        toepassenKnop.setEnabled(false);
    }//GEN-LAST:event_toepassenKnopActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed

    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

    }//GEN-LAST:event_formWindowClosing

    private void neeKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neeKnopActionPerformed
        wijzigingenDialog.dispose();
        dispose();
    }//GEN-LAST:event_neeKnopActionPerformed

    private void jaKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jaKnopActionPerformed
        pasDataToe();
        /*
        String dataWeek, dataWeekend;
        dataWeek = werkrooster.dataOpslaanDienstenWeek();
        dataWeekend = werkrooster.dataOpslaanDienstenWeekend();
        try {
            bestandStream.saveData(dataWeek, dataWeekend);
        } catch (IOException e) {

        }*/
        dispose();
    }//GEN-LAST:event_jaKnopActionPerformed

    private void annulerenKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerenKnopActionPerformed
        wijzigingenDialog.dispose();
    }//GEN-LAST:event_annulerenKnopActionPerformed

    private void bewerkDataKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bewerkDataKnopActionPerformed
        bewerkenFrame.setVisible(true);
    }//GEN-LAST:event_bewerkDataKnopActionPerformed

    private void annulerenDataKnopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerenDataKnopActionPerformed
        leesData();
        toepassenKnop.setEnabled(false);
        bewerkenFrame.dispose();
    }//GEN-LAST:event_annulerenDataKnopActionPerformed

    private void afsluitenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_afsluitenButtonActionPerformed
        afsluiten();
    }//GEN-LAST:event_afsluitenButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
            //UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WerkroosterNWgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WerkroosterNWgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WerkroosterNWgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WerkroosterNWgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new WerkroosterNWgui().setVisible(true);
            }
        });
    }

    /**
     * Vul de maandkeuze-combobox met maanden.
     */
    private void vulMaandComboBox() {
        maandComboBox.removeAllItems();
        maandComboBox.addItem("Januari");
        maandComboBox.addItem("Februari");
        maandComboBox.addItem("Maart");
        maandComboBox.addItem("April");
        maandComboBox.addItem("Mei");
        maandComboBox.addItem("Juni");
        maandComboBox.addItem("Juli");
        maandComboBox.addItem("Augustus");
        maandComboBox.addItem("September");
        maandComboBox.addItem("Oktober");
        maandComboBox.addItem("November");
        maandComboBox.addItem("December");
        maandComboBox.setSelectedIndex(-1);
    }

    /**
     * Vul de jaarkeuze-combobox met jaren.
     */
    private void vulJaarComboBox() {
        jaarComboBox.removeAllItems();
        jaarComboBox.addItem("2020");
        jaarComboBox.addItem("2021");
        jaarComboBox.addItem("2022");
        jaarComboBox.addItem("2023");
        jaarComboBox.addItem("2024");
        jaarComboBox.addItem("2025");
        jaarComboBox.addItem("2026");
        jaarComboBox.addItem("2027");
        jaarComboBox.addItem("2028");
        jaarComboBox.addItem("2029");
        jaarComboBox.addItem("2030");
    }

    /**
     * Toont de dagen van de maand in de interface. Per dag wordt een combobox
     * gemaakt om de dienst te kiezen.
     */
    private void toonMaand() {
        int maand, jaar;
        comboArray.clear();
        if (maandComboBox.getSelectedIndex() >= 0) {
            toonDienstenButton.setEnabled(true);
            maand = maandComboBox.getSelectedIndex() + 1;
            jaar = Integer.parseInt((String) jaarComboBox.getSelectedItem());
            dagenPanel.removeAll();
            maandPanel.removeAll();
            maandPanel.updateUI();
            dagenPanel.updateUI();
            kalender = new MaandKalender(LocalDate.of(jaar, maand, 1));
            kal = kalender.geefMaand();
            maandPanel.setLayout(new GridLayout(0, 7, 10, 10));
            dagenPanel.add(maandPanel, BorderLayout.PAGE_START);
            JLabel maLabel = new JLabel("Ma", JLabel.CENTER);
            maLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            maLabel.setBackground(Color.WHITE);
            maLabel.setOpaque(true);
            maandPanel.add(maLabel);
            JLabel diLabel = new JLabel("Di", JLabel.CENTER);
            diLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            diLabel.setBackground(Color.WHITE);
            diLabel.setOpaque(true);
            maandPanel.add(diLabel);
            JLabel woLabel = new JLabel("Wo", JLabel.CENTER);
            woLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            woLabel.setBackground(Color.WHITE);
            woLabel.setOpaque(true);
            maandPanel.add(woLabel);
            JLabel doLabel = new JLabel("Do", JLabel.CENTER);
            doLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            doLabel.setBackground(Color.WHITE);
            doLabel.setOpaque(true);
            maandPanel.add(doLabel);
            JLabel vrLabel = new JLabel("Vr", JLabel.CENTER);
            vrLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            vrLabel.setBackground(Color.WHITE);
            vrLabel.setOpaque(true);
            maandPanel.add(vrLabel);
            JLabel zaLabel = new JLabel("Za", JLabel.CENTER);
            zaLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            zaLabel.setBackground(Color.ORANGE);
            zaLabel.setOpaque(true);
            maandPanel.add(zaLabel);
            JLabel zoLabel = new JLabel("Zo", JLabel.CENTER);
            zoLabel.setFont(new Font("Dialog", Font.BOLD, 12));
            zoLabel.setBackground(Color.ORANGE);
            zoLabel.setOpaque(true);
            maandPanel.add(zoLabel);
            int begin = kalender.eersteDagMaand();
            int dag = 1;
            for (int i = 0; i < kal.size() + begin; i++) {
                if (i >= begin) {
                    JPanel dagPanel = new JPanel();
                    dagPanel.setLayout(new BorderLayout());
                    String labelTekst = "" + (dag);
                    JLabel label = new JLabel(labelTekst);
                    dagPanel.add(label, BorderLayout.LINE_START);
                    JComboBox combobox = new JComboBox();
                    combobox.addItem("");
                    if ((kal.get(dag - 1).getDayOfWeek() == DayOfWeek.SUNDAY) || (kal.get(dag - 1).getDayOfWeek() == DayOfWeek.SATURDAY)) {
                        for (Dienst d : dienstenWeekend) {
                            combobox.addItem(d.geefNaam());
                        }
                    } else {
                        for (Dienst d : dienstenWeek) {
                            combobox.addItem(d.geefNaam());
                        }
                    }
                    combobox.setSelectedIndex(-1);
                    dagPanel.add(combobox, BorderLayout.LINE_END);
                    if (kalender.isWeekend(dag - 1)) {
                        dagPanel.setBackground(Color.ORANGE);
                    } else {
                        dagPanel.setBackground(Color.WHITE);
                    }
                    comboArray.add(combobox);
                    maandPanel.add(dagPanel);
                    dag++;
                } else {
                    JPanel dagPanel = new JPanel();
                    dagPanel.add(new JLabel());
                    maandPanel.add(dagPanel);
                }
            }
        }
    }

    /**
     * Neemt de keuzes van diensten voor de dagen en geeft alle informatie weer
     * in het tekstgebied
     */
    private void geefOutput() {
        maandTekstGebied.setText("");
        ArrayList<String> namen = new ArrayList<>();
        String tekst = "" + kalender.geefMaandJaar() + "\n\n";
        for (JComboBox c : comboArray) {
            namen.add((String) c.getSelectedItem());
        }
        for (int i = 0; i < namen.size(); i++) {
            if (namen.get(i) != null && !namen.get(i).equals("")) {
                String tekstDienst = "";
                if (kalender.isWeekend(i)) {
                    for (Dienst d : dienstenWeekend) {
                        if (d.geefNaam().equals(namen.get(i))) {
                            tekstDienst = " w dienst " + d.geefTotaal();
                        }
                    }
                } else {
                    for (Dienst d : dienstenWeek) {
                        if (d.geefNaam().equals(namen.get(i))) {
                            tekstDienst = "   dienst " + d.geefTotaal();
                        }
                    }
                }
                if (i < 9) {
                    tekst += " " + (i + 1) + tekstDienst + "\n";
                } else {
                    tekst += (i + 1) + tekstDienst + "\n";
                }
            }
        }
        maandTekstGebied.setText(tekst);
    }

    /**
     * Schrijf de informatie van dagen van de maand met bijbehorend de dienst,
     * werktijden en opmerkingen naar een bestand.
     *
     * @param bestandsnaam Naam van het bestand
     * @param tekst Tekst die moet worden weggeschreven
     * @throws IOException Mocht er een fout optreden, wordt deze afgevangen
     */
    private static void schrijfBestand(String bestandsnaam, String tekst)
            throws IOException {
        File bestand = new File(bestandsnaam);
        try (BufferedWriter out = new BufferedWriter(new FileWriter(bestand))) {
            out.write(tekst);
            out.close();
        }
    }

    /**
     * Herstelt de tabellen (week en weekend) naar de lege stand.
     */
    private void resetTabellen() {
        weekModel = new DefaultTableModel();
        weekendModel = new DefaultTableModel();
        weekModel.addColumn("Naam");
        weekModel.addColumn("Tijd van");
        weekModel.addColumn("Tijd tot");
        weekModel.addColumn("Opmerkingen");
        weekTabel = new JTable(weekModel);
        weekendModel.addColumn("Naam");
        weekendModel.addColumn("Tijd van");
        weekendModel.addColumn("Tijd tot");
        weekendModel.addColumn("Opmerkingen");
        weekendTabel = new JTable(weekendModel);
        weekTabelScrollPane.setViewportView(weekTabel);
        weekendTabelScrollPane.setViewportView(weekendTabel);
        weekTabel.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                toepassenKnop.setEnabled(true);
            }
        });
        weekendTabel.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                toepassenKnop.setEnabled(true);
            }
        });
    }

    /**
     * Haalt de gegevens van de diensten van de week en het weekend op en
     * plaatst dit in de tabellen.
     */
    private void leesData() {
        resetTabellen();
        for (Dienst d : dienstenWeek) {
            String naam = d.geefNaam().trim();
            String tijdVan = d.geefTijdVan().trim();
            String tijdTot = d.geefTijdTot().trim();
            String opmerkingen = d.geefOpmerkingen().trim();
            weekModel.addRow(new Object[]{naam, tijdVan, tijdTot, opmerkingen});
        }
        for (Dienst d : dienstenWeekend) {
            String naam = d.geefNaam().trim();
            String tijdVan = d.geefTijdVan().trim();
            String tijdTot = d.geefTijdTot().trim();
            String opmerkingen = d.geefOpmerkingen().trim();
            weekendModel.addRow(new Object[]{naam, tijdVan, tijdTot, opmerkingen});
        }
    }

    /**
     * Haalt de gegevens uit de tabellen op en vult de overzichten van de
     * diensten van de week en het weekend hiermee.
     */
    private void pasDataToe() {
        ArrayList<Dienst> dienstenWeekNieuw = new ArrayList<>();
        ArrayList<Dienst> dienstenWeekendNieuw = new ArrayList<>();
        for (int i = weekTabel.getRowCount() - 1; i >= 0; i--) {
            if (weekTabel.getValueAt(i, 0).equals("")) {
                ((DefaultTableModel) weekTabel.getModel()).removeRow(i);
            }
        }
        for (int i = 0; i < weekTabel.getRowCount(); i++) {
            String naam, tijdVan, tijdTot, opmerkingen;
            naam = (String) weekTabel.getValueAt(i, 0);
            tijdVan = (String) weekTabel.getValueAt(i, 1);
            if (tijdVan.length() == 4) {
                tijdVan = " " + tijdVan;
            }
            tijdTot = (String) weekTabel.getValueAt(i, 2);
            if (tijdTot.length() == 4) {
                tijdTot = " " + tijdTot;
            }
            opmerkingen = (String) weekTabel.getValueAt(i, 3);
            if (tijdVan.equals("")) {
                tijdVan = "00:00";
            }
            if (tijdTot.equals("")) {
                tijdTot = "00:00";
            }
            dienstenWeekNieuw.add(new Dienst(naam, tijdVan, tijdTot, opmerkingen));
        }
        for (int i = weekendTabel.getRowCount() - 1; i >= 0; i--) {
            if (weekendTabel.getValueAt(i, 0).equals("")) {
                ((DefaultTableModel) weekendTabel.getModel()).removeRow(i);
            }
        }
        for (int i = 0; i < weekendTabel.getRowCount(); i++) {
            String naam, tijdVan, tijdTot, opmerkingen;
            naam = (String) weekendTabel.getValueAt(i, 0);
            tijdVan = (String) weekendTabel.getValueAt(i, 1);
            if (tijdVan.length() == 4) {
                tijdVan = " " + tijdVan;
            }
            tijdTot = (String) weekendTabel.getValueAt(i, 2);
            if (tijdTot.length() == 4) {
                tijdTot = " " + tijdTot;
            }
            opmerkingen = (String) weekendTabel.getValueAt(i, 3);
            if (tijdVan.equals("")) {
                tijdVan = "00:00";
            }
            if (tijdTot.equals("")) {
                tijdTot = "00:00";
            }
            dienstenWeekendNieuw.add(new Dienst(naam, tijdVan, tijdTot, opmerkingen));
        }
        werkrooster.vulDiensten(dienstenWeekNieuw, dienstenWeekendNieuw);
        dienstenWeek = werkrooster.geefDienstenWeek();
        dienstenWeekend = werkrooster.geefDienstenWeekend();
        String dataWeek, dataWeekend;
        dataWeek = werkrooster.dataOpslaanDienstenWeek();
        dataWeekend = werkrooster.dataOpslaanDienstenWeekend();
        try {
            bestandStream.saveData(dataWeek, dataWeekend);
        } catch (IOException e) {

        }
        dagenPanel.removeAll();
        dagenPanel.updateUI();
        maandComboBox.setSelectedIndex(-1);
        jaarComboBox.setSelectedIndex(0);
        toonDienstenButton.setEnabled(false);
        bewaarGegevensKnop.setEnabled(false);
        String tekstGebied = "[Week]\n" + werkrooster.printDienstenWeek() + "\n\n[Weekend]\n" + werkrooster.printDienstenWeekend();
        maandTekstGebied.setText(tekstGebied);
        comboArray.clear();
        nietOpgeslagenMaand = false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton afsluitenButton;
    private javax.swing.JButton annulerenDataKnop;
    private javax.swing.JButton annulerenKnop;
    private javax.swing.JButton bewaarGegevensKnop;
    private javax.swing.JButton bewerkDataKnop;
    private javax.swing.JPanel bewerkDienstenPanel;
    private javax.swing.JFrame bewerkenFrame;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel dagenPanel;
    private javax.swing.JPanel dataOpslaanPanel;
    private javax.swing.JPanel dienstKnoppenPanel;
    private javax.swing.JPanel dienstenTabPanel;
    private javax.swing.JTabbedPane hoofdPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JButton jaKnop;
    private javax.swing.JComboBox<String> jaarComboBox;
    private javax.swing.JComboBox<String> maandComboBox;
    private javax.swing.JPanel maandKnoppenPanel;
    private javax.swing.JPanel maandTabPanel;
    private javax.swing.JButton neeKnop;
    private javax.swing.JButton okButton;
    private javax.swing.JButton okDataKnop;
    private javax.swing.JButton overButton;
    private javax.swing.JFrame overFrame;
    private javax.swing.JLabel overWerkroosterNWLabel;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton resetKnop;
    private javax.swing.JLabel titelLabel;
    private javax.swing.JLabel titelWijzigingenLabel;
    private javax.swing.JButton toepassenKnop;
    private javax.swing.JButton toonDienstenButton;
    private javax.swing.JPanel topPanel;
    private javax.swing.JPanel uitvoerPanel;
    private javax.swing.JButton verwijderRijWeekKnop;
    private javax.swing.JButton verwijderRijWeekendKnop;
    private javax.swing.JButton voegToeWeekKnop;
    private javax.swing.JButton voegToeWeekendKnop;
    private javax.swing.JButton vulMaandButton;
    private javax.swing.JPanel weekKnoppenPanel;
    private javax.swing.JPanel weekTabelPanel;
    private javax.swing.JPanel weekendKnoppenPanel;
    private javax.swing.JPanel weekendTabelPanel;
    private javax.swing.JDialog wijzigingenDialog;
    // End of variables declaration//GEN-END:variables
}
